# public brume GQL schema
type User {
  id: String!
  name: String!
  avatar: String!
  projects: [Project!]!
}

type Project {
  id: String!
  name: String!
  description: String!
  isDirty: Boolean!
  services: [Service!]!
}

type Builder {
  type: String!
  data: BuilderData!
}

type BuilderData {
  image: String!
  registry: String!
  tag: String!
}

input BuilderDataInput {
  image: String!
  registry: String!
  tag: String!
}

type Runner {
  type: String!
  data: RunnerData!
}

type RessourceConstraints {
  request: Float!
  limit: Float!
}

input RessourceConstraintsInput {
  request: Float!
  limit: Float!
}

type RunnerData {
  command: String!
  healthCheckURL: String!
  memory: RessourceConstraints!
  cpu: RessourceConstraints!
  port: Int!
  publicDomain: String!
  privateDomain: String!
}

input RunnerDataInput {
  command: String!
  healthCheckURL: String!
  memory: RessourceConstraintsInput!
  cpu: RessourceConstraintsInput!
  port: Int!
  publicDomain: String!
  privateDomain: String!
}

type Service {
  id: String!
  name: String!
  builder: Builder!
  runner: Runner!

  draftBuilder: Builder
  draftRunner: Runner
}

type Log {
  id: String!
  message: String!
  level: String!
  timestamp: String!
}

input CreateServiceInput {
  name: String!
  image: String!
}

type Query {
  me: User!
  getProjectById(id: String!): Project!
  serviceLogs(serviceId: String!): [Log]!
}

type Mutation {
  createProject(name: String!, description: String): Project!
  addServiceToProject(projectId: String!, input: CreateServiceInput!): Service!
  updateBuilder(serviceId: String!, data: BuilderDataInput!): Builder!
  updateRunner(serviceId: String!, data: RunnerDataInput!): Runner!
  deployProject(projectId: String!): Project!
}

type Subscription {
  serviceLogs(serviceId: String!): [Log]!
}
